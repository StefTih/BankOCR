
Description of the program:

Section 1: Parser class

1.1 extractFile - inside this method the program checks whether that file path exists using a try with resource.
    Then if the path does exist, using a BufferedReader it reads through the txt file line by line
    using a while loop until there are no more lines left to iterate through. Inside the loop
    there are two checks, one for the length of the line. Since the rule is that the line has to be
    27 characters long the program checks whether that is true or not. If the line is 26 characters long
    due to the last character of the line being a space that has not been read, the program will append
    an extra space character to that line to add up to 27 characters. Once that check is completed
    the second check is to count the number of lines that have been read up until now. Once the counter
    reaches 4 lines it gets reset and the 4 lines that we read and appended to the StringBuilder are added
    to the fileValues arrayList. This is recorded as one Account number that has to be converted from a string
    in the type it was stored in the txt file to a normal string number. After the values inside the
    stringBuilder are added to the array, the contents inside it are deleted, so that the batch of strings
    for the next potential account number are being appended. Also the counter is reset to 0.

1.2 getFileValue - a getter which returns the array List of all the fileValues.

Section 2: Processor

2.1 We first create an instance of the Parser class and call the getFileValue method to return the parsed account
    numbers.

2.2 Then we can use the convertFile method to go through the array and process every account number. The processing
    uses regex to separate each line into 3 character values. Then the values are stored in a 2d array. The use of the 2d
    array here is to store the values from each line in a separate index, so that it will be easier to concatenate values
    from multiple lines in the Output class. Therefore, the array stores 9 triplets of characters from each of the three
    lines on which the account number is written. Once that array is filled, it is added to an ArrayList which stores the
    AccountNumbers in this format.

Section 3: Output

3.1 Inside the constructor we initialise an empty String variable which will store all the strings and print them out
    in the console.

3.2 loadMappings - assigns the representations of each number to its number counter part.

3.3 getAccountNumbers - This method goes through the ArrayList which is returned from the Processor class and which
    stores the 2d arrays containing the values in triplet characters. Then from those arrays one by one are concatenated
    the strings from three lines into one big string which is then matched with the mappings set in the previous method.
    If a mapping is not found then a null will be added to the accountNumber string. If that string contains a null
    value instead of a number the program will insert an invalid account number message on its place to warn the user.
    Once all the account numbers are added to the String, the method returns it, so that it can be printed out from the
    main method.
